// Chart Page JavaScript
let chart = null;
let currentStock = null;
let selectedPeriod = 'D'; // D: ÏùºÎ¥â, W: Ï£ºÎ¥â, M: ÏõîÎ¥â, Y: ÎÖÑÎ¥â

// Initialize
document.addEventListener('DOMContentLoaded', () => {
    setupEventListeners();
    initializeChart();
});

// Setup Event Listeners
function setupEventListeners() {
    const searchInput = document.getElementById('stockSearch');
    const periodButtons = document.querySelectorAll('.period-btn');
    const resetZoomBtn = document.getElementById('resetZoom');

    // Stock search
    let searchTimeout;
    searchInput.addEventListener('input', (e) => {
        clearTimeout(searchTimeout);
        searchTimeout = setTimeout(() => searchStocks(e.target.value), 300);
    });

    // Period selection
    periodButtons.forEach(btn => {
        btn.addEventListener('click', (e) => {
            periodButtons.forEach(b => b.classList.remove('bg-blue-600', 'text-white'));
            periodButtons.forEach(b => b.classList.add('bg-gray-200', 'hover:bg-gray-300'));

            e.target.classList.remove('bg-gray-200', 'hover:bg-gray-300');
            e.target.classList.add('bg-blue-600', 'text-white');

            selectedPeriod = e.target.dataset.period;
            if (currentStock) {
                loadChartData(currentStock.code, currentStock.name);
            }
        });
    });

    // Reset zoom button
    resetZoomBtn.addEventListener('click', () => {
        if (chart) {
            chart.resetZoom();
        }
    });

    // Click outside to close search results
    document.addEventListener('click', (e) => {
        if (!e.target.closest('#stockSearch') && !e.target.closest('#searchResults')) {
            document.getElementById('searchResults').classList.add('hidden');
        }
    });
}

// Initialize Chart
function initializeChart() {
    const ctx = document.getElementById('stockChart').getContext('2d');
    chart = new Chart(ctx, {
        type: 'candlestick',
        data: {
            datasets: [{
                label: 'Ï£ºÍ∞Ä',
                data: [],
                barPercentage: 0.5,
                categoryPercentage: 0.8,
                barThickness: 'flex',
                maxBarThickness: 8,
                color: {
                    up: '#ef4444',
                    down: '#3b82f6',
                    unchanged: '#6b7280'
                },
                borderColor: {
                    up: '#dc2626',
                    down: '#2563eb',
                    unchanged: '#4b5563'
                }
            }]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            animation: {
                duration: 300
            },
            interaction: {
                intersect: false,
                mode: 'index'
            },
            plugins: {
                legend: {
                    display: true,
                    position: 'top',
                    labels: {
                        font: {
                            size: 14,
                            weight: 'bold'
                        }
                    }
                },
                tooltip: {
                    backgroundColor: 'rgba(0, 0, 0, 0.9)',
                    padding: 16,
                    titleFont: {
                        size: 14
                    },
                    bodyFont: {
                        size: 13
                    },
                    callbacks: {
                        title: function(context) {
                            const date = new Date(context[0].parsed.x);
                            return date.toLocaleDateString('ko-KR', {
                                year: 'numeric',
                                month: 'long',
                                day: 'numeric'
                            });
                        },
                        label: function(context) {
                            const data = context.raw;
                            return [
                                `ÏãúÍ∞Ä: ${data.o.toLocaleString()}Ïõê`,
                                `Í≥†Í∞Ä: ${data.h.toLocaleString()}Ïõê`,
                                `Ï†ÄÍ∞Ä: ${data.l.toLocaleString()}Ïõê`,
                                `Ï¢ÖÍ∞Ä: ${data.c.toLocaleString()}Ïõê`,
                                `Îì±ÎùΩ: ${(data.c - data.o).toLocaleString()}Ïõê (${((data.c - data.o) / data.o * 100).toFixed(2)}%)`
                            ];
                        }
                    }
                },
                zoom: {
                    pan: {
                        enabled: true,
                        mode: 'x',
                        modifierKey: 'ctrl'
                    },
                    zoom: {
                        wheel: {
                            enabled: true,
                            speed: 0.1
                        },
                        pinch: {
                            enabled: true
                        },
                        mode: 'x'
                    }
                }
            },
            scales: {
                x: {
                    type: 'time',
                    time: {
                        unit: 'day',
                        tooltipFormat: 'yyyyÎÖÑ MMÏõî ddÏùº',
                        displayFormats: {
                            day: 'MM/dd',
                            week: 'MM/dd',
                            month: 'yyyy/MM',
                            year: 'yyyy'
                        }
                    },
                    ticks: {
                        source: 'auto',
                        autoSkip: true,
                        autoSkipPadding: 50,
                        maxRotation: 0,
                        minRotation: 0,
                        maxTicksLimit: 20,
                        font: {
                            size: 11
                        }
                    },
                    grid: {
                        display: true,
                        drawOnChartArea: true,
                        drawTicks: true,
                        color: '#e5e7eb',
                        lineWidth: 1
                    }
                },
                y: {
                    position: 'right',
                    beginAtZero: false,
                    ticks: {
                        callback: function(value) {
                            return value.toLocaleString() + 'Ïõê';
                        },
                        font: {
                            size: 11
                        }
                    },
                    grid: {
                        color: '#f3f4f6',
                        drawTicks: false
                    }
                }
            }
        }
    });
}

// Search Stocks
async function searchStocks(query) {
    const resultsContainer = document.getElementById('searchResults');

    if (!query || query.trim().length === 0) {
        resultsContainer.classList.add('hidden');
        return;
    }

    try {
        const response = await fetch(`/api/stock/search?query=${encodeURIComponent(query)}`);
        const stocks = await response.json();

        if (stocks.length === 0) {
            resultsContainer.innerHTML = '<div class="p-4 text-gray-500">Í≤ÄÏÉâ Í≤∞Í≥ºÍ∞Ä ÏóÜÏäµÎãàÎã§</div>';
        } else {
            resultsContainer.innerHTML = stocks.map(stock => `
                <div class="p-3 hover:bg-gray-100 cursor-pointer border-b last:border-b-0"
                     onclick="selectStock('${stock.code}', '${stock.name}')">
                    <div class="font-semibold">${stock.name}</div>
                    <div class="text-sm text-gray-500">${stock.code}</div>
                </div>
            `).join('');
        }

        resultsContainer.classList.remove('hidden');
    } catch (error) {
        console.error('Stock search error:', error);
        resultsContainer.innerHTML = '<div class="p-4 text-red-500">Í≤ÄÏÉâ Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§</div>';
        resultsContainer.classList.remove('hidden');
    }
}

// Select Stock
window.selectStock = async function(code, name) {
    currentStock = { code, name };
    document.getElementById('stockSearch').value = `${name} (${code})`;
    document.getElementById('searchResults').classList.add('hidden');
    document.getElementById('chartTitle').textContent = name;

    await Promise.all([
        loadChartData(code, name),
        loadStockInfo(code)
    ]);
};

// Load Chart Data
async function loadChartData(stockCode, stockName) {
    try {
        console.log(`üìä Ï∞®Ìä∏ Îç∞Ïù¥ÌÑ∞ Î°úÎî© ÏãúÏûë: ${stockCode}, Í∏∞Í∞Ñ: ${selectedPeriod}`);

        // loadAll=trueÎ°ú Ï†ÑÏ≤¥ Îç∞Ïù¥ÌÑ∞ ÏöîÏ≤≠
        const response = await fetch(
            `/api/stock/chart/${stockCode}?period=${selectedPeriod}&loadAll=true`
        );

        if (!response.ok) {
            throw new Error('Failed to fetch chart data');
        }

        const data = await response.json();
        console.log('üì¶ Î∞õÏùÄ Îç∞Ïù¥ÌÑ∞:', data);

        if (data.error) {
            console.error('‚ùå API ÏóêÎü¨:', data.error, data.message);
            throw new Error(data.message || 'API Ïò§Î•ò Î∞úÏÉù');
        }

        if (data.output2 && data.output2.length > 0) {
            console.log(`‚úÖ ${data.output2.length}Í∞úÏùò Ï∫îÎì§ Îç∞Ïù¥ÌÑ∞ Ï≤òÎ¶¨ ÏãúÏûë`);

            // Reverse data to show oldest to newest
            const chartData = data.output2.reverse();

            // Convert to candlestick format with proper date parsing
            const candlestickData = chartData.map(item => {
                // Parse date string (YYYYMMDD) to Date object
                const dateStr = item.stck_bsop_date;
                const year = parseInt(dateStr.substring(0, 4));
                const month = parseInt(dateStr.substring(4, 6)) - 1; // 0-based month
                const day = parseInt(dateStr.substring(6, 8));

                // Create date at noon to avoid timezone issues
                const date = new Date(year, month, day, 12, 0, 0);

                return {
                    x: date, // Date Í∞ùÏ≤¥ ÏÇ¨Ïö©
                    o: parseInt(item.stck_oprc), // ÏãúÍ∞Ä
                    h: parseInt(item.stck_hgpr), // Í≥†Í∞Ä
                    l: parseInt(item.stck_lwpr), // Ï†ÄÍ∞Ä
                    c: parseInt(item.stck_clpr)  // Ï¢ÖÍ∞Ä
                };
            });

            console.log('‚úÖ Ï∫îÎì§ Îç∞Ïù¥ÌÑ∞ Î≥ÄÌôò ÏôÑÎ£å');
            console.log('Ï≤´ Î≤àÏß∏ Ï∫îÎì§:', candlestickData[0]);
            console.log('ÎßàÏßÄÎßâ Ï∫îÎì§:', candlestickData[candlestickData.length - 1]);
            console.log('Ï¥ù Ï∫îÎì§ Ïàò:', candlestickData.length);

            chart.data.datasets[0].data = candlestickData;
            chart.data.datasets[0].label = `${stockName} (${getPeriodName(selectedPeriod)})`;

            // xÏ∂ï ÏãúÍ∞Ñ Îã®ÏúÑ Î∞è ÏÑ§Ï†ï ÏóÖÎç∞Ïù¥Ìä∏
            updateChartTimeSettings(selectedPeriod, candlestickData);

            console.log('üîÑ Ï∞®Ìä∏ ÏóÖÎç∞Ïù¥Ìä∏ ÏãúÏûë...');
            chart.update(); // Ï∞®Ìä∏ ÏóÖÎç∞Ïù¥Ìä∏
            console.log('‚úÖ Ï∞®Ìä∏ ÏóÖÎç∞Ïù¥Ìä∏ ÏôÑÎ£å');
        } else {
            console.warn('‚ö†Ô∏è Îç∞Ïù¥ÌÑ∞Í∞Ä ÏóÜÏäµÎãàÎã§:', data);
            alert('Ï∞®Ìä∏ Îç∞Ïù¥ÌÑ∞Í∞Ä ÏóÜÏäµÎãàÎã§.');
        }
    } catch (error) {
        console.error('‚ùå Chart data loading error:', error);
        console.error('ÏóêÎü¨ Ïä§ÌÉù:', error.stack);
        alert(`Ï∞®Ìä∏ Îç∞Ïù¥ÌÑ∞Î•º Î∂àÎü¨Ïò§ÎäîÎç∞ Ïã§Ìå®ÌñàÏäµÎãàÎã§.\n${error.message}`);
    }
}

// Í∏∞Í∞ÑÎ™Ö Î∞òÌôò
function getPeriodName(period) {
    const names = {
        'D': 'ÏùºÎ¥â',
        'W': 'Ï£ºÎ¥â',
        'M': 'ÏõîÎ¥â',
        'Y': 'ÎÖÑÎ¥â'
    };
    return names[period] || 'ÏùºÎ¥â';
}

// xÏ∂ï ÏãúÍ∞Ñ Îã®ÏúÑ Î∞è ÏÑ§Ï†ï ÏóÖÎç∞Ïù¥Ìä∏
function updateChartTimeSettings(period, data) {
    const timeSettings = {
        'D': {
            unit: 'day',
            tooltipFormat: 'yyyyÎÖÑ MMÏõî ddÏùº',
            displayFormats: {
                day: 'MM/dd'
            },
            maxTicksLimit: 15
        },
        'W': {
            unit: 'week',
            tooltipFormat: 'yyyyÎÖÑ MMÏõî ddÏùº',
            displayFormats: {
                week: 'MM/dd'
            },
            maxTicksLimit: 20
        },
        'M': {
            unit: 'month',
            tooltipFormat: 'yyyyÎÖÑ MMÏõî',
            displayFormats: {
                month: 'yyyy/MM'
            },
            maxTicksLimit: 12
        },
        'Y': {
            unit: 'year',
            tooltipFormat: 'yyyyÎÖÑ',
            displayFormats: {
                year: 'yyyy'
            },
            maxTicksLimit: 10
        }
    };

    const settings = timeSettings[period] || timeSettings['D'];

    // xÏ∂ï ÏãúÍ∞Ñ ÏÑ§Ï†ï ÏóÖÎç∞Ïù¥Ìä∏
    chart.options.scales.x.time.unit = settings.unit;
    chart.options.scales.x.time.tooltipFormat = settings.tooltipFormat;
    chart.options.scales.x.time.displayFormats = settings.displayFormats;
    chart.options.scales.x.ticks.maxTicksLimit = settings.maxTicksLimit;
}

// Load Stock Info
async function loadStockInfo(stockCode) {
    try {
        console.log(`üìä Ï¢ÖÎ™© Ï†ïÎ≥¥ Ï°∞Ìöå ÏãúÏûë: ${stockCode}`);
        const response = await fetch(`/api/stock/quote/${stockCode}`);

        if (!response.ok) {
            const errorText = await response.text();
            console.error(`‚ùå API ÏùëÎãµ Ïã§Ìå® (${response.status}):`, errorText);
            throw new Error(`Failed to fetch stock info: ${response.status}`);
        }

        const data = await response.json();
        console.log('‚úÖ Ï¢ÖÎ™© Ï†ïÎ≥¥ Ï°∞Ìöå ÏÑ±Í≥µ:', data);

        // API ÏùëÎãµ Îç∞Ïù¥ÌÑ∞ Íµ¨Ï°∞ ÌôïÏù∏ (camelCase ÌòïÏãù)
        if (!data || !data.currentPrice) {
            console.error('‚ùå ÏûòÎ™ªÎêú Îç∞Ïù¥ÌÑ∞ ÌòïÏãù:', data);
            throw new Error('Invalid data format');
        }

        // Update stock info section
        const stockInfo = document.getElementById('stockInfo');
        const priceChange = data.priceChange || 0;
        const priceChangeRate = data.changeRate || 0;
        const isPositive = priceChange >= 0;

        stockInfo.innerHTML = `
            <div class="text-center">
                <div class="text-4xl font-bold mb-2">
                    ${data.currentPrice.toLocaleString()}
                    <span class="text-lg text-gray-500">Ïõê</span>
                </div>
                <div class="text-lg ${isPositive ? 'text-red-600' : 'text-blue-600'} font-semibold">
                    ${isPositive ? '‚ñ≤' : '‚ñº'} ${Math.abs(priceChange).toLocaleString()}Ïõê
                    (${isPositive ? '+' : ''}${priceChangeRate.toFixed(2)}%)
                </div>
            </div>

            <div class="border-t pt-4 mt-4 space-y-2">
                <div class="flex justify-between">
                    <span class="text-gray-600">ÏãúÍ∞Ä</span>
                    <span class="font-semibold">${(data.openPrice || 0).toLocaleString()}Ïõê</span>
                </div>
                <div class="flex justify-between">
                    <span class="text-gray-600">Í≥†Í∞Ä</span>
                    <span class="font-semibold text-red-600">${(data.highPrice || 0).toLocaleString()}Ïõê</span>
                </div>
                <div class="flex justify-between">
                    <span class="text-gray-600">Ï†ÄÍ∞Ä</span>
                    <span class="font-semibold text-blue-600">${(data.lowPrice || 0).toLocaleString()}Ïõê</span>
                </div>
                <div class="flex justify-between">
                    <span class="text-gray-600">Í±∞ÎûòÎüâ</span>
                    <span class="font-semibold">${(data.volume || 0).toLocaleString()}Ï£º</span>
                </div>
            </div>
        `;

        // Update price details section
        const priceDetails = document.getElementById('priceDetails');
        priceDetails.innerHTML = `
            <div class="space-y-2 text-sm">
                <div class="flex justify-between">
                    <span class="text-gray-600">52Ï£º ÏµúÍ≥†</span>
                    <span class="font-semibold">${(data.week52High || 0).toLocaleString()}Ïõê</span>
                </div>
                <div class="flex justify-between">
                    <span class="text-gray-600">52Ï£º ÏµúÏ†Ä</span>
                    <span class="font-semibold">${(data.week52Low || 0).toLocaleString()}Ïõê</span>
                </div>
                <div class="flex justify-between">
                    <span class="text-gray-600">ÏãúÍ∞ÄÏ¥ùÏï°</span>
                    <span class="font-semibold">${((data.marketCap || 0) / 100000000).toFixed(0)}ÏñµÏõê</span>
                </div>
                <div class="flex justify-between">
                    <span class="text-gray-600">ÏÉÅÏû•Ï£ºÏãùÏàò</span>
                    <span class="font-semibold">${((data.listedShares || 0) / 1000).toFixed(0)}Ï≤úÏ£º</span>
                </div>
                <div class="flex justify-between">
                    <span class="text-gray-600">Í±∞ÎûòÎåÄÍ∏à</span>
                    <span class="font-semibold">${((data.tradeValue || 0) / 100000000).toFixed(0)}ÏñµÏõê</span>
                </div>
            </div>
        `;

        console.log('‚úÖ Ï¢ÖÎ™© Ï†ïÎ≥¥ UI ÏóÖÎç∞Ïù¥Ìä∏ ÏôÑÎ£å');
    } catch (error) {
        console.error('‚ùå Stock info loading error:', error);
        const stockInfo = document.getElementById('stockInfo');
        const priceDetails = document.getElementById('priceDetails');

        stockInfo.innerHTML = `
            <div class="text-center text-red-500 py-8">
                Ï†ïÎ≥¥Î•º Î∂àÎü¨Ïò§ÎäîÎç∞ Ïã§Ìå®ÌñàÏäµÎãàÎã§<br>
                <span class="text-sm">${error.message}</span>
            </div>
        `;

        priceDetails.innerHTML = `
            <div class="text-center text-gray-500 py-8">
                Îç∞Ïù¥ÌÑ∞Î•º Î∂àÎü¨Ïò¨ Ïàò ÏóÜÏäµÎãàÎã§
            </div>
        `;
    }
}
