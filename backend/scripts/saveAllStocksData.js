const kisApiService = require('../src/services/kisApiService');

// Ï†ÄÏû•Ìï† Ï¢ÖÎ™© Î¶¨Ïä§Ìä∏
const stockList = [
    { code: '005930', name: 'ÏÇºÏÑ±Ï†ÑÏûê' },
    { code: '000660', name: 'SKÌïòÏù¥ÎãâÏä§' },
    { code: '035420', name: 'NAVER' },
    { code: '035720', name: 'Ïπ¥Ïπ¥Ïò§' },
    { code: '207940', name: 'ÏÇºÏÑ±Î∞îÏù¥Ïò§Î°úÏßÅÏä§' },
    { code: '373220', name: 'LGÏóêÎÑàÏßÄÏÜîÎ£®ÏÖò' },
    { code: '005380', name: 'ÌòÑÎåÄÏ∞®' },
    { code: '006400', name: 'ÏÇºÏÑ±SDI' },
    { code: '051910', name: 'LGÌôîÌïô' },
    { code: '005490', name: 'POSCOÌôÄÎî©Ïä§' },
    { code: '068270', name: 'ÏÖÄÌä∏Î¶¨Ïò®' },
    { code: '028260', name: 'ÏÇºÏÑ±Î¨ºÏÇ∞' },
    { code: '012330', name: 'ÌòÑÎåÄÎ™®ÎπÑÏä§' },
    { code: '066570', name: 'LGÏ†ÑÏûê' },
    { code: '096770', name: 'SKÏù¥ÎÖ∏Î≤†Ïù¥ÏÖò' },
    { code: '003550', name: 'LG' },
    { code: '017670', name: 'SKÌÖîÎ†àÏΩ§' },
    { code: '034020', name: 'ÎëêÏÇ∞ÏóêÎÑàÎπåÎ¶¨Ìã∞' },
    { code: '018260', name: 'ÏÇºÏÑ±ÏóêÏä§ÎîîÏóêÏä§' },
    { code: '009150', name: 'ÏÇºÏÑ±Ï†ÑÍ∏∞' },
    { code: '032830', name: 'ÏÇºÏÑ±ÏÉùÎ™Ö' },
    { code: '003670', name: 'Ìè¨Ïä§ÏΩîÌì®Ï≤òÏó†' },
    { code: '011200', name: 'HMM' },
    { code: '086790', name: 'ÌïòÎÇòÍ∏àÏúµÏßÄÏ£º' },
    { code: '105560', name: 'KBÍ∏àÏúµ' },
    { code: '055550', name: 'Ïã†ÌïúÏßÄÏ£º' },
    { code: '000270', name: 'Í∏∞ÏïÑ' },
    { code: '024110', name: 'Í∏∞ÏóÖÏùÄÌñâ' },
    { code: '316140', name: 'Ïö∞Î¶¨Í∏àÏúµÏßÄÏ£º' },
    { code: '010130', name: 'Í≥†Î†§ÏïÑÏó∞' },
    { code: '259960', name: 'ÌÅ¨ÎûòÌîÑÌÜ§' },
    { code: '036570', name: 'ÏóîÏî®ÏÜåÌîÑÌä∏' },
    { code: '352820', name: 'ÌïòÏù¥Î∏å' },
    { code: '251270', name: 'ÎÑ∑ÎßàÎ∏î' },
    { code: '323410', name: 'Ïπ¥Ïπ¥Ïò§Î±ÖÌÅ¨' },
    { code: '030200', name: 'KT' },
    { code: '034220', name: 'LGÎîîÏä§ÌîåÎ†àÏù¥' },
    { code: '047810', name: 'ÌïúÍµ≠Ìï≠Í≥µÏö∞Ï£º' },
    { code: '009540', name: 'HDÌïúÍµ≠Ï°∞ÏÑ†Ìï¥Ïñë' },
    { code: '010950', name: 'S-Oil' }
];

// Î¥â Ï∞®Ìä∏ ÌÉÄÏûÖ
const periods = [
    { code: 'D', name: 'ÏùºÎ¥â' },
    { code: 'W', name: 'Ï£ºÎ¥â' },
    { code: 'M', name: 'ÏõîÎ¥â' }
];

async function saveAllData() {
    console.log('================================================');
    console.log('üì• Ï†ÑÏ≤¥ Ï¢ÖÎ™© Îç∞Ïù¥ÌÑ∞ Ï†ÄÏû• ÏãúÏûë');
    console.log(`Ï¢ÖÎ™© Ïàò: ${stockList.length}Í∞ú`);
    console.log(`Í∏∞Í∞Ñ: ${periods.map(p => p.name).join(', ')}`);
    console.log('================================================\n');

    let successCount = 0;
    let failCount = 0;

    for (let i = 0; i < stockList.length; i++) {
        const stock = stockList[i];
        console.log(`\n[${i + 1}/${stockList.length}] ${stock.name} (${stock.code})`);
        console.log('‚îÄ'.repeat(50));

        for (const period of periods) {
            try {
                console.log(`  üìä ${period.name} Îç∞Ïù¥ÌÑ∞ Î°úÎî© Ï§ë...`);

                // loadAll=trueÎ°ú Ï†ÑÏ≤¥ Îç∞Ïù¥ÌÑ∞ Î°úÎìú (ÏûêÎèôÏúºÎ°ú DBÏóê Ï†ÄÏû•Îê®)
                const data = await kisApiService.getStockChartData(stock.code, period.code, true);

                if (data && data.length > 0) {
                    console.log(`  ‚úÖ ${period.name} Ï†ÄÏû• ÏôÑÎ£å: ${data.length}Í∞ú`);
                    successCount++;
                } else {
                    console.log(`  ‚ö†Ô∏è  ${period.name} Îç∞Ïù¥ÌÑ∞ ÏóÜÏùå`);
                }

                // API Ìò∏Ï∂ú Ï†úÌïú Î∞©ÏßÄ (1Ï¥à ÎåÄÍ∏∞)
                await new Promise(resolve => setTimeout(resolve, 1000));

            } catch (error) {
                console.error(`  ‚ùå ${period.name} Ï†ÄÏû• Ïã§Ìå®:`, error.message);
                failCount++;
            }
        }
    }

    console.log('\n================================================');
    console.log('üìä Ï†ÑÏ≤¥ Ï†ÄÏû• ÏôÑÎ£å');
    console.log(`‚úÖ ÏÑ±Í≥µ: ${successCount}Í∞ú`);
    console.log(`‚ùå Ïã§Ìå®: ${failCount}Í∞ú`);
    console.log('================================================');
}

// Ïä§ÌÅ¨Î¶ΩÌä∏ Ïã§Ìñâ
saveAllData()
    .then(() => {
        console.log('\nÌîÑÎ°úÍ∑∏Îû® Ï¢ÖÎ£å');
        process.exit(0);
    })
    .catch(error => {
        console.error('\n‚ùå Ïò§Î•ò Î∞úÏÉù:', error);
        process.exit(1);
    });
